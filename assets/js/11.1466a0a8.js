(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{574:function(n,s,t){"use strict";t.r(s);var e=t(16),a=Object(e.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("blockquote",[t("p",[n._v("本篇重点关注以下 3 点：")]),n._v(" "),t("ol",[t("li",[n._v("Golang 基础网络编程")]),n._v(" "),t("li",[n._v("所谓 「TCP 粘包问题」")]),n._v(" "),t("li",[n._v("如何解决「TCP 粘包问题」")])])]),n._v(" "),t("h2",{attrs:{id:"基础网络编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础网络编程"}},[n._v("#")]),n._v(" 基础网络编程")]),n._v(" "),t("p",[n._v("这是 sidergo 系列教程的第一篇，但是开篇不涉及 sidergo 相关的内容，而是把重点放在网络编程，因为 sidergo 的实现第一步就是 C/S 网络编程。")]),n._v(" "),t("p",[n._v("sidergo/redis-cli 之间的通信通过是 TCP 协议，所以我们从一个简单的 Golang 网络编程代码开始。")]),n._v(" "),t("div",{staticClass:"language-golang line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// client/main.go\nfunc main() {\n\tconn, _ := net.Dial("tcp", ":8081")\n\tcontent := "hello\\nworld\\nand\\ngoodbye\\n"\n\tn, err := conn.Write([]byte(content))\n\tfmt.Println(n, err)\n}\n\n//server/main.go\nfunc main() {\n\tlistener, _ := net.Listen("tcp", ":8081")\n\tfor {\n\t\tconn, _ := listener.Accept()\n\t\tgo func(conn net.Conn) {\n\t\t\tbuf := bufio.NewReader(conn)\n\t\t\tfor {\n\t\t\t\tbuffer, err := buf.ReadBytes(\'\\n\')\n\t\t\t\ttime.Sleep(time.Second)  // 注意这里的 sleep\n\t\t\t\tif err != io.EOF {\n\t\t\t\t\tfmt.Print(string(buffer))\n\t\t\t\t}\n\t\t\t}\n\t\t}(conn)\n\t}\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br")])]),t("p",[n._v("分别运行 client 和 server，server 端会每隔 1s 输出：")]),n._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[n._v("➜  sidergo git:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" ✗ go run example/server/main.go\nhello\nworld\nand\ngoodbye\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("p",[n._v("上面的代码可以很容易的从网上找到并且有详细的解释，这里不做过多的说明。这边我们重点要弄清 一个问题：")]),n._v(" "),t("ol",[t("li",[n._v("client 是一次性发送整个 content，但是 server 却每次只读到部分内容？（不是一次性输出 content，而是间隔 1s 输出部分内容，所以说 server 每次只读只到部分内容）")])]),n._v(" "),t("p",[n._v("这个问题可以很简单的回答：因为 "),t("code",[n._v("buf.ReadBytes('\\n')")]),n._v("  会逐个字节的读取 client 发送过来的内容，直到读取到 "),t("code",[n._v("\\n")]),n._v(" 之后返回。如果 client 发送过来的内容全部读取完毕，那么就返回 "),t("code",[n._v("io.EOF")]),n._v(" 表示内容读取完毕。而就是这个简单代码就解决了大名鼎鼎的「TCP 粘包问题」。")]),n._v(" "),t("h2",{attrs:{id:"所谓「tcp-粘包问题」"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#所谓「tcp-粘包问题」"}},[n._v("#")]),n._v(" 所谓「TCP 粘包问题」")]),n._v(" "),t("blockquote",[t("p",[n._v("首先要指出：「TCP 粘包问题」本身就不是一个正确的描述，但是在很多地方甚至包括面试给你挖坑都会碰到这个名词，所以这里也不正确的使用这个词\n那什么是粘包问题：**A 端在接收到 B 端传递过来的数据，无法正确的解析数据。更具体点说，无法区分数据的边界。**如果无法理解这段解释，那么我们从 TCP 协议讲讲。")])]),n._v(" "),t("p",[n._v("可能你不是很熟悉 TCP/IP 协议、三次握手/四次挥手等网络相关内容，没关系，我们也可以屏蔽那些细节，从高一点的角度理解 TCP 粘包问题。")]),n._v(" "),t("p",[n._v("TCP 是一个基于「字节流」的传输层通信协议，这里重点在「字节流」。基于字节流的意思是：不管传输的数据是文本、图片、还是视频，在 TCP 层都是将数据变成字节流发送给对方，所以上面 "),t("code",[n._v("hello\\nworld\\nand\\ngoodbye\\n")]),n._v(" 在 TCP 层是这样传递的：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/chenjiayao/sidergo-posts/master/docs/images/chapter-1-1.jpg",alt:""}})]),n._v(" "),t("p",[n._v("而 server 端从到 TCP 读取到字节数据之后，内心会有一个疑问："),t("strong",[n._v("client 给我发送了这么些个字节数据，我要怎么看？")])]),n._v(" "),t("p",[n._v("client 希望发给 server 的信息是：「hello\\nworld\\nand\\ngoodbye」。但是由于数据在 TCP 层传输中都是以字节的形式传输，所以 server 端只会收到字节数据，而 server 端依靠自己无法将字节数据正确解析，server 可能会解析成 "),t("code",[n._v("hel lo\\nwo rld\\n and\\ng oodb ye\\n")]),n._v(" 等任意形式，好像 TCP 在传输数据过程中将数据都粘合到一起了。")]),n._v(" "),t("p",[n._v("现在来解释「TCP 粘包问题」这个描述为什么不正确：**因为 TCP 本身设计只将数据以字节流的形式发送给对方，而如何解析收到的字节流数据是应用本身的事情。**无法正确解析字节流数据是应用的责任，这个锅 TCP 不背。")]),n._v(" "),t("p",[n._v("那 server 要如何正确解析从 TCP 层读取到的字节流数据？")]),n._v(" "),t("h2",{attrs:{id:"数据解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据解析"}},[n._v("#")]),n._v(" 数据解析")])])}),[],!1,null,null,null);s.default=a.exports}}]);