(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{575:function(e,s,a){"use strict";a.r(s);var r=a(16),n=Object(r.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("blockquote",[a("p",[e._v("本篇重点关注以下 2 点：")]),e._v(" "),a("ol",[a("li",[e._v("理解 & 解析 Redis 通信协议")]),e._v(" "),a("li",[e._v("interface 在单元测试中的作用")])])]),e._v(" "),a("p",[e._v("想要实现一个 redis-server，能够使用 redis-cli 进行操作，那么必须理解 Redis 的通信协议，并且使用 Redis 的通信协议来进行网络编程。幸运的是，Redis 的通信协议："),a("a",{attrs:{href:"https://redis.io/topics/protocol",target:"_blank",rel:"noopener noreferrer"}},[e._v("RESP"),a("OutboundLink")],1),e._v(" 非常简单。redis 作为一个高性能服务器，通信协议上没有设计的很高深，而是直接使用文本传输。下面我们来尝试下解析 Redis 的通信协议。")]),e._v(" "),a("h3",{attrs:{id:"redis-通信协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-通信协议"}},[e._v("#")]),e._v(" Redis 通信协议")]),e._v(" "),a("p",[e._v("Redis 通信协议将数据类型分为 5 种：")]),e._v(" "),a("ol",[a("li",[e._v("单行字符串")]),e._v(" "),a("li",[e._v("多行字符串")]),e._v(" "),a("li",[e._v("整数")]),e._v(" "),a("li",[e._v("错误消息")]),e._v(" "),a("li",[e._v("数组")])]),e._v(" "),a("p",[e._v("redis-cli 向 redis-server 发送命令和 redis-server 返回的数据都是由这 5 种基本的数据类型组成的，下面我们来看看这 5 种数据类型在 redis-cli/redis-server 交互中的基本使用")]),e._v(" "),a("p",[e._v("单行字符串")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> set key value\nOK   // redis-server 返回 OK 就是单行字符串\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v('多行字符串，注意单行字符串和多行字符串在展示的区别：单行字符串没有「""」')]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> get key\n"value"  // get key 命令返回多行字符串\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("整数")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> ttl key\n(integer) -1   // ttl 命令返回整数\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("错误消息")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> zadd key score memeber\n(error) ERR value is not a valid float  //返回一个错误消息\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("数组")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> smembers set1\n1) "member2"\n2) "member1"   //返回一个数组\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("现在，我们已经知道 redis 通信协议有 5 种基本的数据类型以及这 5 种数据类型的基本使用，现在我们来具体看看这 5 种数据类型在网络编程中具体以什么样的格式传递。")]),e._v(" "),a("p",[e._v("在开始之前，有一个点需要提一下：在每个数据类型之后，统一加上 "),a("code",[e._v("\\r\\n")]),e._v(" 表示结束。这里的作用就是上一篇提到的「固定分隔符分割数据」。")]),e._v(" "),a("p",[e._v("单行字符串：在数据之前加上 "),a("code",[e._v("+")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> set key value\nOK    // +OK\\r\\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("多行字符串：在数据之前加上 "),a("code",[e._v("$")]),e._v("，后面跟字符串长度")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> get key\n"value"  //$5\\r\\nvalue\\r\\n\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("单行字符串和多行字符串很类似，他们的区别在于：多行字符串是「二进制安全」的字符串。上面我们提到会使用 "),a("code",[e._v("\\r\\n")]),e._v(" 来分割数据，但是 string 的 key 和 value 可以包含 "),a("code",[e._v("\\r\\n")]),e._v(" 的："),a("code",[e._v("set key va\\r\\nlue")]),e._v("。如果使用单行字符串表示 string 的 value，那么如果 value 中包含 "),a("code",[e._v("\\r\\n")]),e._v(" 就会导致 redis 解析错误。多行字符串中在 "),a("code",[e._v("$")]),e._v(" 后面加上字符串长度，那么就可以根据这个值正确读取到字符串内容。这里品一下多行字符串的设计， 融入了上一篇提到的两个解决 TCP 数据解析的方案：「固定分隔符分割数据」和「固定 header + 数据包长度」。")]),e._v(" "),a("p",[e._v("整数：在数据之前加上 "),a("code",[e._v(":")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> ttl key\n(integer) -1   // :-1\\r\\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("错误消息：在数据之前加上 "),a("code",[e._v("-")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> zadd key score memeber\n(error) ERR value is not a valid float  //-ERR value is not a valid float\\r\\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("数组：以 "),a("code",[e._v("*")]),e._v(" 开头，后面跟上数组长度")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> smembers set1\n1) "member"\n2) "member1"   //*2\\r\\n$6\\r\\n\\member\\r\\n$7\\r\\nmember1\\r\\n\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("数组长度比较复杂，我们把  "),a("code",[e._v("\\r\\n")]),e._v("  换行处理，这样阅读比较直观")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("*2\n$6\nmember\n$7\nmember1\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);