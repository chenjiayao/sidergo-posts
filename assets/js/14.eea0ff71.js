(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{577:function(s,e,n){"use strict";n.r(e);var a=n(16),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("blockquote",[n("p",[s._v("本篇重点关注以下 2 点：")]),s._v(" "),n("ol",[n("li",[s._v("skipList 的实现")]),s._v(" "),n("li",[s._v("redis 中对于 skipList 的扩展")])])]),s._v(" "),n("p",[s._v("⚠️ 本篇属于纯纯的数据结构，如果你对数据结构感到恐惧可以跳过本篇，直接使用 GitHub 上的代码，不会对后续的学习产生影响。"),n("em",[s._v("不过我还是建议你直面恐惧😃")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"👨‍🏫-skiplist-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#👨‍🏫-skiplist-介绍"}},[s._v("#")]),s._v(" 👨‍🏫 skiplist 介绍")]),s._v(" "),n("p",[s._v("redis 中 sortedset 的底层数据结构就是使用 skiplist，所以在实现 sortedset 相关命令之前，我们有必要了解并且实现 skiplist。")]),s._v(" "),n("p",[s._v("skiplist 的目的是为了快速查找，它本质上是一个「有序链表」，但是为了更快的查找，在有序链表上做了一些改进。下面用几张图示来展示 skiplist 工作原理。")]),s._v(" "),n("p",[s._v("对于一个有序链表：查找效率是 "),n("code",[s._v("O(n)")]),s._v("，同样对有序链表的增删改都要先进行查找，所以增删改的效率也是 "),n("code",[s._v("O(n)")]),s._v("。这个效率是比较慢的，它的好处在于元素已经有序，这样对 "),n("code",[s._v("zrank")]),s._v(" 之类的命令直接顺序读取链表数据就行。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/chenjiayao/sidergo-posts/master/docs/images/20220402093329.png",alt:""}})]),s._v(" "),n("p",[s._v("在代码中，通常会这么设计有序链表")]),s._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type Node struct {\n    Element     //保存元素\n    backward *Node //前一个节点\n    forward *Node //下一个节点\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("如果，我们要提高有序链表的查找效率，"),n("strong",[s._v("取间隔节点，对节点新增一个指针，指向下下个节点")]),s._v("：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/chenjiayao/sidergo-posts/master/docs/images/20220402103927.png",alt:""}})]),s._v(" "),n("p",[s._v("这样有序链表就进化了，现在假设我们要查找 19，查找思路如下：")]),s._v(" "),n("ol",[n("li",[s._v("从 3 的两个 forward 指针遍历，第一个 foward 指向的下一个元素的值为 12，12 < 19，那么 12 之前的节点都就不用遍历了。在上面的图示中，节点 8 在查找过程中就被跳过了，这也是 skiplist 名字的由来。")]),s._v(" "),n("li",[s._v("同样，遍历 12 的两个 forward 指针，第一个指针指向的节点为 23，23 > 19，那么接着查看第二个 forward 指针，第二个指针指向 19，就是我们要找的元素。")])]),s._v(" "),n("p",[s._v("和有序列表对比查找效率，有序列表需要遍历 "),n("code",[s._v("3-8-12-19")]),s._v("，而现在只要遍历 "),n("code",[s._v("3-12-19")]),s._v("，如果链表长度够长，那么效率提高会更明显。")]),s._v(" "),n("p",[s._v("这种情况下，Node 结构体可以设计成这样")]),s._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type Node struct {\n    Element\n    forwards   []*Node //  下一个节点，\n    backward *Node    //  最底层的前一个节点\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这种形态距离真正的 skiplist 已经很接近了，真正的 skiplist 对于哪些节点要增加指针是随机的。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/chenjiayao/sidergo-posts/master/docs/images/20220402110046.png",alt:""}})]),s._v(" "),n("p",[s._v("上面的图示就是一个 skiplist，对于哪个节点需要增加指针，增加多少个指针是随机的。这样，skiplist 的时间复杂度是 "),n("code",[s._v("O(log n)")]),s._v("，和树的时间复杂度一样，效率很高。")]),s._v(" "),n("h2",{attrs:{id:"👨‍💻-代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#👨‍💻-代码实现"}},[s._v("#")]),s._v(" 👨‍💻 代码实现")]),s._v(" "),n("p",[s._v("现在我们已经知道 skiplist 的形态和查找思路，接下来就可以尝试实现了。")]),s._v(" "),n("p",[s._v("首先 Node 的结构体上面已经提到了")]),s._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\ntype Element struct {\n\tScore  float64\n\tMember string\n}\n\ntype Level struct {\n    forward *Node //同层的下一个节点\n}\n\ntype Node struct {\n    Element\n    forwards   []*Level //  下一个节点，\n    backward *Node    //  最底层的前一个节点\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("以节点 8 为例子来展示下 Node 各个属性所表示的含义")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/chenjiayao/sidergo-posts/master/docs/images/20220402114625.png",alt:""}})]),s._v(" "),n("p",[s._v("除了 Node，还需要一个结构体来表示 skiplist")]),s._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type SkipList struct {\n    tail   *Node\n    header *Node\n    level  int    // 最高 level 层数，上面图示中为 4，(最高为节点 8，有 4 层)\n    length int64  // skiplist 长度\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("现在，Element、Node 和 SkipList 结构体都有了，我们可以尝试实现 skiplist 的增删改查，不过在此之前需要实现 "),n("code",[s._v("MakeSkipList")]),s._v(" 和 "),n("code",[s._v("MakeNode")]),s._v(" 两个函数。")]),s._v(" "),n("p",[s._v("创建一个 Node 需要 3 个属性：")]),s._v(" "),n("ol",[n("li",[s._v("score")]),s._v(" "),n("li",[s._v("member")]),s._v(" "),n("li",[s._v("level")])]),s._v(" "),n("p",[s._v("前两个为 redis zset 需要的，第三个 level 可以设定当前 Node 的层数。有了这 3 个属性，我们可以实现 "),n("code",[s._v("MakeNode")])]),s._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("func MakeNode(level int, score float64, member string) *Node {\n\n    node := &Node{\n        Element: Element{\n            Score:  score,\n            Member: member,\n        },\n        levels: make([]*Level, level),\n    }\n\n    for i := 0; i < len(node.levels); i++ {\n        node.levels[i] = &Level{\n            forward: nil,\n        }\n    }\n    return node\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[n("code",[s._v("MakeSkipList")]),s._v(" 会创建一个 skiplist，为了代码逻辑比较清楚，通常会为 skiplist 创建一个 node，这个 node 不保存 Element，把这个空 Node 当作 skiplist 的 header。")]),s._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('func MakeSkipList() *SkipList {\n\treturn &SkipList{\n\t\ttail:   nil,\n\t\theader: MakeNode(MAX_LEVEL, 0, ""),\n\t\tlevel:  1,\n\t\tlength: 0,\n\t}\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);